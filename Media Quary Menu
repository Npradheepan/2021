<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
* {
	border: 0;
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
:root {
	--bg: #e3e4e8;
	--bgT: #e3e4e800;
	--fg: #17181c;
	--focused: #b6cafb;
	--focusRing: #86a6f9;
	--unchecked: #ffffff;
	--checked: #255ff4;
	font-size: calc(20px + (30 - 20) * (100vw - 320px) / (1280 - 320));
}
body,
input {
	font: 1em/1.5 system-ui, -apple-system, sans-serif;
}
body {
	background: var(--bg);
	color: var(--fg);
	display: flex;
	height: 100vh;
}
form {
	margin: auto;
	overflow: hidden;
	position: relative;
	padding: 0.75em 0;
}
form:before,
form:after,
.circles,
.circle {
	position: absolute;
}
form:before,
form:after {
	content: "";
	left: 0;
	width: 100%;
	height: 0.5em;
	z-index: 1;
}
form:before {
	background: linear-gradient(var(--bg), var(--bgT));
	top: 0;
}
form:after {
	background: linear-gradient(var(--bgT), var(--bg));
	bottom: 0;
}
input {
	position: fixed;
	top: -1.5em;
	left: -1.5em;
}
input:checked + label {
	background: var(--focused);
	box-shadow: 0 0 0 2px var(--focusRing) inset;
}
input:nth-of-type(2):checked ~ .circles .circle {
	transform: translateY(-6em);
}
input:nth-of-type(3):checked ~ .circles .circle {
	transform: translateY(-3em);
}
input:nth-of-type(4):checked ~ .circles .circle {
	transform: translateY(0);
}
label,
.circle {
	transition: all 0.25s ease-in-out;
}
label {
	border-radius: 0.25em;
	cursor: pointer;
	display: block;
	padding: 0.75em 1em 0.75em 2.75em;
	-tap-highlight-color: transparent;
}
.circles {
	padding: 0.25em 0;
	top: 0;
	left: 1em;
}
.circle {
	background: var(--unchecked);
	border-radius: 50%;
	box-shadow: -0.2em -0.2em 0.2em #0003 inset, 0.2em 0.2em 0.2em #0003;
	pointer-events: none;
	top: 1.75em;
	transform: translateY(-9em);
	width: 1em;
	height: 1em;
}
.circle:nth-child(2) {
	top: 4.75em;
	transition-delay: 0.05s;
}
.circle:nth-child(3) {
	top: 7.75em;
	transition-delay: 0.1s;
}
.circle:nth-child(4) {
	top: 10.75em;
	transition-delay: 0.15s;
}
.circle:nth-child(5) {
	top: 13.75em;
	transition-delay: 0.2s;
}
.circle:nth-child(6) {
	top: 16.75em;
	transition-delay: 0.25s;
}
.circle:nth-child(7) {
	top: 19.75em;
	transition-delay: 0.3s;
}
.circle-checked {
	background: var(--checked);
}
.circles-flip-delays .circle:nth-child(1) {
	transition-delay: 0.3s;
}
.circles-flip-delays .circle:nth-child(2) {
	transition-delay: 0.25s;
}
.circles-flip-delays .circle:nth-child(3) {
	transition-delay: 0.2s;
}
.circles-flip-delays .circle:nth-child(4) {
	transition-delay: 0.15s;
}
.circles-flip-delays .circle:nth-child(5) {
	transition-delay: 0.1s;
}
.circles-flip-delays .circle:nth-child(6) {
	transition-delay: 0.05s;
}
.circles-flip-delays .circle:nth-child(7) {
	transition-delay: 0s;
}

/* Dark mode */
@media (prefers-color-scheme: dark) {
	:root {
		--bg: #17181c;
		--bgT: #17181c00;
		--fg: #e3e4e8;
		--focused: #062779;
		--focusRing: #0936aa;
		--unchecked: #5c6270;
	}
}

</style>
<body>
    <form>
        <input id="a" type="radio" name="os" value="Android" data-radio-index="0" checked>
        <label for="a">Android</label>
        <input id="b" type="radio" name="os" value="Linux" data-radio-index="1">
        <label for="b">Linux</label>
        <input id="c" type="radio" name="os" value="macOS" data-radio-index="2">
        <label for="c">macOS</label>
        <input id="d" type="radio" name="os" value="Windows" data-radio-index="3">
        <label for="d">Windows</label>
        <div class="circles">
            <div class="circle"></div>
            <div class="circle"></div>
            <div class="circle"></div>
            <div class="circle circle-checked"></div>
            <div class="circle"></div>
            <div class="circle"></div>
            <div class="circle"></div>
        </div>
    </form>
</body>
<script>
    document.addEventListener("DOMContentLoaded", () => {
	let os = new RollingRadios("os");
});
class RollingRadios {
	constructor(radioName) {
		this.circles = document.querySelector(".circles");
		this.data_attr = "data-radio-index";
		this.last_focused_index = 0;
		this.radio_name = radioName;

		this.first_focused_index();
		document.addEventListener(
			"change",
			this.update_last_focused_index.bind(this)
		);
	}
	first_focused_index() {
		let radios = document.getElementsByName(this.radio_name);
		radios.forEach((r) => {
			if (r.checked) this.update_last_focused_index(r);
		});
	}
	flip_delays(radioIndex) {
		// flip the delays depending on which index is greater
		if (this.circles) {
			let lfi = this.last_focused_index,
				flipClass = "circles-flip-delays";

			if (radioIndex > lfi) this.circles.classList.add(flipClass);
			else if (radioIndex < lfi) this.circles.classList.remove(flipClass);
		}
	}
	update_last_focused_index(e) {
		let tar = e.target || e,
			radioIndex = tar.getAttribute(this.data_attr);

		if (tar.name == this.radio_name && radioIndex) {
			this.flip_delays(radioIndex);
			this.last_focused_index = radioIndex;
		}
	}
}

</script>
</html>
